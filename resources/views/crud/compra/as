 <div class="col-md-12 mb-2">
                                <label>Fecha:</label>
                                <input readonly type="date" name="fecha" id="fecha" class="form-control"
                                    value="<?php echo date('Y-m-d'); ?>">
                                <?php
                                use Carbon\Carbon;
                                $fecha_hora = Carbon::now()->toDateTimeString();
                                ?>
                                <input type="hidden" name="fecha_hora" value="{{ $fecha_hora }}">
                            </div>


                            public function store(StoreCompraRequest $request)
    {
        // dd($request);
        try {
            DB::beginTransaction();
    
            $compra = Compra::create(array_merge($request->validated(), ['user_id' => auth()->id()]));
    
            $arrayInsumo = $request->get('arrayidinsumo');
            $arrayCantidad = $request->get('arraycantidad');
            $arrayCaracteristicas = $request->get('arraycaracteristicas');
    
            // Verificar que los arrays tengan la misma longitud
            if (count($arrayInsumo) !== count($arrayCantidad) || count($arrayInsumo) !== count($arrayCaracteristicas)) {
                return redirect()->back()->withErrors(['error' => 'Los datos de entrada son inconsistentes.']);
            }
    
            // Inicializar la variable para calcular el valor total de la compra
            $valorTotal = 0;
    
            // Recorrer cada insumo y actualizar su información
            foreach ($arrayInsumo as $key => $insumoId) {
                $insumo = Insumo::find($insumoId);
    
                // Verificar si el insumo tiene características
                $tieneCaracteristicas = isset($arrayCaracteristicas[$key]) && is_array($arrayCaracteristicas[$key])
                    && !empty(array_filter($arrayCaracteristicas[$key]));
    
                // Obtener el valor unitario de la característica del insumo
                $valorUnitario = $arrayCaracteristicas[$key]['valor_unitario'] ?? 0;
    
                // Calcular el valor total por insumo
                $valorTotal += $valorUnitario * $arrayCantidad[$key];
    
                if (!$tieneCaracteristicas) {
                    // Relación sin características
                    $compra->insumos()->attach($insumoId, ['cantidad' => $arrayCantidad[$key]]);
                } else {
                    // Relación con características
                    $compra->insumos()->syncWithoutDetaching([$insumoId => ['cantidad' => $arrayCantidad[$key]]]);
    
                    $insumo->caracteristicas()->create([
                        'invima' => $arrayCaracteristicas[$key]['invima'] ?? null,
                        'lote' => $arrayCaracteristicas[$key]['lote'] ?? null,
                        'vencimiento' => $arrayCaracteristicas[$key]['vencimiento'] ?? null,
                        'id_marca' => $arrayCaracteristicas[$key]['id_marca'] ?? null,
                        'id_presentacion' => $arrayCaracteristicas[$key]['id_presentacion'] ?? null,
                        'cantidad' => $arrayCantidad[$key],
                        'cantidad_compra' => $arrayCantidad[$key],
                        'valor_unitario' => $valorUnitario,
                        'compra_id' => $compra->id,
                    ]);
                }
    
                // Incrementar el stock del insumo
                $insumo->increment('stock', intval($arrayCantidad[$key]));
    
                // Agregar la entrada al Kardex
                $this->agregarEntradaKardex($insumo->id, $request->input('fecha'), intval($arrayCantidad[$key]));
            }
    
            // Almacenar el valor total de la compra en el campo valor_total
            $compra->valor_total = $valorTotal;
            $compra->save();
    
            DB::commit();
            return redirect('compra')->with('Mensaje', 'Compra registrada con éxito.');
        } catch (Exception $e) {
            DB::rollBack();
            return redirect()->back()->withErrors(['error' => 'Ocurrió un error al procesar la solicitud.']);
        }
    }
                            
                            <div class="col-md-12 mb-2">
                                    <label>Fecha:</label>
                                    <input readonly type="date" name="fecha" id="fecha" class="form-control"
                                        value="<?php echo date('Y-m-d'); ?>">
                                    <?php
                                    use Carbon\Carbon;
                                    $fecha_hora = Carbon::now()->toDateTimeString();
                                    ?>
                                    <input type="hidden" name="fecha_hora" value="{{ $fecha_hora }}">
                                </div>
 public function store(StoreEntregaRequest $request)
    {
        try {
            DB::beginTransaction();

            // Crear la entrega
            $entrega = Entrega::create($request->validated());
            $arrayInsumo = $request->get('arrayidinsumo');
            $arrayCantidad = $request->get('arraycantidad');
            $arrayVariante = $request->get('arrayvariante');
            $arrayInvima = $request->get('arrayinvima');
            $arrayLote = $request->get('arraylote');
            $arrayVencimiento = $request->get('arrayvencimiento');
            $arrayMarca = $request->get('arraymarca');
            $arrayPresentacion = $request->get('arraypresentacion');
            $arrayValor = $request->get('arrayvalor');

            $totalCantidadEntregada = 0;
            $valorTotalEntrega = 0; // Variable para acumular el valor total

            foreach ($arrayInsumo as $key => $insumoId) {
                $variante = $arrayVariante[$key];
                $cantidad = $arrayCantidad[$key];
                $invima = $arrayInvima[$key];
                $lote = $arrayLote[$key];
                $vencimiento = $arrayVencimiento[$key];
                $marca = $arrayMarca[$key];
                $presentacion = $arrayPresentacion[$key];
                $valor = $arrayValor[$key];

                // Asociar insumo a la entrega con los detalles adicionales
                $entrega->insumos()->attach([
                    $insumoId => [
                        'cantidad' => $cantidad,
                        'invima' => $invima,
                        'lote' => $lote,
                        'vencimiento' => $vencimiento,
                        'id_marca' => $marca,
                        'id_presentacion' => $presentacion,
                        'valor_unitario' => $valor,
                    ]
                ]);

                // Actualizar stock del insumo
                $insumo = Insumo::find($insumoId);
                $insumo->stock -= intval($cantidad); // Actualizar stock
                $insumo->save();

                // Calcular el valor total de este insumo y acumularlo
                $valorTotalEntrega += $cantidad * $valor;

                // Obtener características del insumo
                $caracteristicas = DB::table('insumo_caracteristicas')
                    ->where('insumo_id', $insumoId)
                    ->where('invima', $invima)
                    ->where('lote', $lote)
                    ->where('vencimiento', $vencimiento)
                    ->where('id_marca', $marca)
                    ->where('id_presentacion', $presentacion)
                    ->get();

                $cantidadRestante = intval($cantidad);

                foreach ($caracteristicas as $caracteristica) {
                    if ($cantidadRestante <= 0) {
                        break; // Si ya se ha restado la cantidad total, salir del bucle
                    }

                    if ($caracteristica->cantidad >= $cantidadRestante) {
                        DB::table('insumo_caracteristicas')
                            ->where('id', $caracteristica->id)
                            ->decrement('cantidad', $cantidadRestante);

                        $nuevaCantidad = $caracteristica->cantidad - $cantidadRestante;
                        if ($nuevaCantidad == 0) {
                            DB::table('insumo_caracteristicas')
                                ->where('id', $caracteristica->id)
                                ->update(['updated_at' => Carbon::now()]);
                        }

                        $cantidadRestante = 0;
                    } else {
                        $cantidadRestante -= $caracteristica->cantidad;
                        DB::table('insumo_caracteristicas')
                            ->where('id', $caracteristica->id)
                            ->update([
                                'cantidad' => 0,
                                'updated_at' => Carbon::now(),
                            ]);
                    }
                }

                if ($cantidadRestante > 0) {
                    // Manejar la cantidad restante si es necesario
                }

                // Obtener la fecha de entrega
                $fechaEntrega = Carbon::createFromFormat('Y-m-d H:i:s', $entrega->fecha_hora);
                $mesEntrega = $fechaEntrega->month;
                $annoEntrega = $fechaEntrega->year;

                // Buscar o crear un nuevo registro en el Kardex para el insumo, mes y año correspondientes
                $kardex = Kardex::firstOrNew([
                    'insumo_id' => $insumoId,
                    'mes' => $mesEntrega,
                    'anno' => $annoEntrega
                ]);

                $kardex->egresos += intval($cantidad);
                $kardex->saldo -= intval($cantidad);
                $kardex->save();

                $totalCantidadEntregada += $cantidad;
            }

            // Actualizar el valor total de la entrega
            $entrega->valor_total = $valorTotalEntrega;
            $entrega->save();

            DB::commit();
        } catch (Exception $e) {
            Log::error('Ocurrió un error al procesar la solicitud: ' . $e->getMessage());
            DB::rollBack();
            return redirect()->back()->withErrors(['error' => 'Ocurrió un error al procesar la solicitud.']);
        }

        return redirect('entrega')->with('Mensaje', 'Entrega registrada con éxito.');
    }
